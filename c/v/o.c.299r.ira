
;; Function vector_add (vector_add, funcdef_no=0, decl_uid=1454, cgraph_uid=1, symbol_order=0)

Starting decreasing number of live ranges...
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
Adding REG_EQUIV to insn 9 for source of insn 10
Adding REG_EQUIV to insn 13 for source of insn 14
Adding REG_EQUIV to insn 17 for source of insn 18
Adding REG_EQUIV to insn 21 for source of insn 22
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Reg 98: local to bb 2 def dominates all uses has unique first use
Reg 99: local to bb 2 def dominates all uses has unique first use
Ignoring reg 88, has equiv memory
Ignoring reg 87, has equiv memory
Ignoring reg 90, has equiv memory
Ignoring reg 93, has equiv memory
Ignoring reg 86, has equiv memory
Ignoring reg 91, has equiv memory
Ignoring reg 96, has equiv memory
Ignoring reg 89, has equiv memory
Ignoring reg 94, has equiv memory
Ignoring reg 92, has equiv memory
Reg 97 uninteresting
Ignoring reg 95, has equiv memory
Found def insn 25 for 98 to be not moveable
Found def insn 26 for 99 to be not moveable
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
init_insns for 86: (insn_list:REG_DEP_TRUE 10 (nil))
init_insns for 87: (insn_list:REG_DEP_TRUE 7 (nil))
init_insns for 88: (insn_list:REG_DEP_TRUE 8 (nil))
init_insns for 89: (insn_list:REG_DEP_TRUE 14 (nil))
init_insns for 90: (insn_list:REG_DEP_TRUE 11 (nil))
init_insns for 91: (insn_list:REG_DEP_TRUE 12 (nil))
init_insns for 92: (insn_list:REG_DEP_TRUE 18 (nil))
init_insns for 93: (insn_list:REG_DEP_TRUE 15 (nil))
init_insns for 94: (insn_list:REG_DEP_TRUE 16 (nil))
init_insns for 95: (insn_list:REG_DEP_TRUE 22 (nil))
init_insns for 96: (insn_list:REG_DEP_TRUE 19 (nil))

Pass 0 for finding pseudo/allocno costs

    a14 (r99,l0) best GR_REGS, allocno GR_REGS
    a15 (r98,l0) best GR_REGS, allocno GR_REGS
    a2 (r97,l0) best GR_REGS, allocno GR_REGS
    a3 (r96,l0) best GR_REGS, allocno GR_REGS
    a1 (r95,l0) best GR_REGS, allocno GR_REGS
    a6 (r94,l0) best GR_REGS, allocno GR_REGS
    a7 (r93,l0) best GR_REGS, allocno GR_REGS
    a5 (r92,l0) best GR_REGS, allocno GR_REGS
    a9 (r91,l0) best GR_REGS, allocno GR_REGS
    a10 (r90,l0) best GR_REGS, allocno GR_REGS
    a8 (r89,l0) best GR_REGS, allocno GR_REGS
    a12 (r88,l0) best GR_REGS, allocno GR_REGS
    a13 (r87,l0) best GR_REGS, allocno GR_REGS
    a11 (r86,l0) best GR_REGS, allocno GR_REGS
    a4 (r85,l0) best GR_REGS, allocno GR_REGS
    a0 (r84,l0) best GR_REGS, allocno GR_REGS

  a0(r84,l0) costs: SIBCALL_REGS:0,0 JALR_REGS:0,0 GR_REGS:0,0 MEM:12200,12200
  a1(r95,l0) costs: SIBCALL_REGS:0,0 JALR_REGS:0,0 GR_REGS:0,0 MEM:2000,2000
  a2(r97,l0) costs: SIBCALL_REGS:0,0 JALR_REGS:0,0 GR_REGS:0,0 MEM:2000,2000
  a3(r96,l0) costs: SIBCALL_REGS:0,0 JALR_REGS:0,0 GR_REGS:0,0 MEM:0,0
  a4(r85,l0) costs: SIBCALL_REGS:0,0 JALR_REGS:0,0 GR_REGS:0,0 MEM:7200,7200
  a5(r92,l0) costs: SIBCALL_REGS:0,0 JALR_REGS:0,0 GR_REGS:0,0 MEM:2000,2000
  a6(r94,l0) costs: SIBCALL_REGS:0,0 JALR_REGS:0,0 GR_REGS:0,0 MEM:0,0
  a7(r93,l0) costs: SIBCALL_REGS:0,0 JALR_REGS:0,0 GR_REGS:0,0 MEM:0,0
  a8(r89,l0) costs: SIBCALL_REGS:0,0 JALR_REGS:0,0 GR_REGS:0,0 MEM:2000,2000
  a9(r91,l0) costs: SIBCALL_REGS:0,0 JALR_REGS:0,0 GR_REGS:0,0 MEM:0,0
  a10(r90,l0) costs: SIBCALL_REGS:0,0 JALR_REGS:0,0 GR_REGS:0,0 MEM:0,0
  a11(r86,l0) costs: SIBCALL_REGS:0,0 JALR_REGS:0,0 GR_REGS:0,0 MEM:2000,2000
  a12(r88,l0) costs: SIBCALL_REGS:0,0 JALR_REGS:0,0 GR_REGS:0,0 MEM:0,0
  a13(r87,l0) costs: SIBCALL_REGS:0,0 JALR_REGS:0,0 GR_REGS:0,0 MEM:0,0
  a14(r99,l0) costs: SIBCALL_REGS:400,400 JALR_REGS:400,400 GR_REGS:400,400 MEM:1200,1200
  a15(r98,l0) costs: SIBCALL_REGS:400,400 JALR_REGS:400,400 GR_REGS:400,400 MEM:1200,1200


Pass 1 for finding pseudo/allocno costs

    r99: preferred GR_REGS, alternative NO_REGS, allocno GR_REGS
    r98: preferred GR_REGS, alternative NO_REGS, allocno GR_REGS
    r97: preferred GR_REGS, alternative NO_REGS, allocno GR_REGS
    r96: preferred GR_REGS, alternative NO_REGS, allocno GR_REGS
    r95: preferred GR_REGS, alternative NO_REGS, allocno GR_REGS
    r94: preferred GR_REGS, alternative NO_REGS, allocno GR_REGS
    r93: preferred GR_REGS, alternative NO_REGS, allocno GR_REGS
    r92: preferred GR_REGS, alternative NO_REGS, allocno GR_REGS
    r91: preferred GR_REGS, alternative NO_REGS, allocno GR_REGS
    r90: preferred GR_REGS, alternative NO_REGS, allocno GR_REGS
    r89: preferred GR_REGS, alternative NO_REGS, allocno GR_REGS
    r88: preferred GR_REGS, alternative NO_REGS, allocno GR_REGS
    r87: preferred GR_REGS, alternative NO_REGS, allocno GR_REGS
    r86: preferred GR_REGS, alternative NO_REGS, allocno GR_REGS
    r85: preferred GR_REGS, alternative NO_REGS, allocno GR_REGS
    r84: preferred GR_REGS, alternative NO_REGS, allocno GR_REGS

  a0(r84,l0) costs: GR_REGS:0,0 MEM:13000,13000
  a1(r95,l0) costs: GR_REGS:0,0 MEM:2000,2000
  a2(r97,l0) costs: GR_REGS:0,0 MEM:2000,2000
  a3(r96,l0) costs: GR_REGS:0,0 MEM:0,0
  a4(r85,l0) costs: GR_REGS:0,0 MEM:8000,8000
  a5(r92,l0) costs: GR_REGS:0,0 MEM:2000,2000
  a6(r94,l0) costs: GR_REGS:0,0 MEM:0,0
  a7(r93,l0) costs: GR_REGS:0,0 MEM:0,0
  a8(r89,l0) costs: GR_REGS:0,0 MEM:2000,2000
  a9(r91,l0) costs: GR_REGS:0,0 MEM:0,0
  a10(r90,l0) costs: GR_REGS:0,0 MEM:0,0
  a11(r86,l0) costs: GR_REGS:0,0 MEM:2000,2000
  a12(r88,l0) costs: GR_REGS:0,0 MEM:0,0
  a13(r87,l0) costs: GR_REGS:0,0 MEM:0,0
  a14(r99,l0) costs: GR_REGS:400,400 MEM:2000,2000
  a15(r98,l0) costs: GR_REGS:400,400 MEM:2000,2000

   Insn 22(l0): point = 0
   Insn 21(l0): point = 2
   Insn 20(l0): point = 4
   Insn 18(l0): point = 6
   Insn 17(l0): point = 8
   Insn 16(l0): point = 10
   Insn 14(l0): point = 12
   Insn 13(l0): point = 14
   Insn 19(l0): point = 16
   Insn 12(l0): point = 18
   Insn 10(l0): point = 20
   Insn 9(l0): point = 22
   Insn 15(l0): point = 24
   Insn 11(l0): point = 26
   Insn 7(l0): point = 28
   Insn 8(l0): point = 30
   Insn 3(l0): point = 32
   Insn 2(l0): point = 34
   Insn 26(l0): point = 36
   Insn 25(l0): point = 38
 a0(r84): [1..34]
 a1(r95): [1..2]
 a2(r97): [3..4]
 a3(r96): [3..16]
 a4(r85): [5..32]
 a5(r92): [7..8]
 a6(r94): [9..10]
 a7(r93): [9..24]
 a8(r89): [13..14]
 a9(r91): [15..18]
 a10(r90): [15..26]
 a11(r86): [21..22]
 a12(r88): [23..30]
 a13(r87): [23..28]
 a14(r99): [33..36]
 a15(r98): [35..38]
Compressing live ranges: from 41 to 20 - 48%
Ranges after the compression:
 a0(r84): [0..17]
 a1(r95): [0..1]
 a2(r97): [2..3]
 a3(r96): [2..11]
 a4(r85): [4..15]
 a5(r92): [4..5]
 a6(r94): [6..7]
 a7(r93): [6..15]
 a8(r89): [8..9]
 a9(r91): [10..11]
 a10(r90): [10..15]
 a11(r86): [12..13]
 a12(r88): [14..15]
 a13(r87): [14..15]
 a14(r99): [16..19]
 a15(r98): [18..19]
+++Allocating 128 bytes for conflict table (uncompressed size 128)
;; a0(r84,l0) conflicts: a1(r95,l0) a2(r97,l0) a3(r96,l0) a5(r92,l0) a4(r85,l0) a6(r94,l0) a7(r93,l0) a8(r89,l0) a9(r91,l0) a10(r90,l0) a11(r86,l0) a12(r88,l0) a13(r87,l0) a14(r99,l0)
;;     total conflict hard regs: 1
;;     conflict hard regs: 1

;; a1(r95,l0) conflicts: a0(r84,l0)
;;     total conflict hard regs: 1
;;     conflict hard regs: 1

;; a2(r97,l0) conflicts: a0(r84,l0) a3(r96,l0)
;;     total conflict hard regs: 1
;;     conflict hard regs: 1

;; a3(r96,l0) conflicts: a0(r84,l0) a2(r97,l0) a5(r92,l0) a4(r85,l0) a6(r94,l0) a7(r93,l0) a8(r89,l0) a9(r91,l0) a10(r90,l0)
;;     total conflict hard regs: 1
;;     conflict hard regs: 1

;; a4(r85,l0) conflicts: a0(r84,l0) a3(r96,l0) a5(r92,l0) a6(r94,l0) a7(r93,l0) a8(r89,l0) a9(r91,l0) a10(r90,l0) a11(r86,l0) a12(r88,l0) a13(r87,l0)
;;     total conflict hard regs: 1
;;     conflict hard regs: 1

;; a5(r92,l0) conflicts: a0(r84,l0) a3(r96,l0) a4(r85,l0)
;;     total conflict hard regs: 1
;;     conflict hard regs: 1

;; a6(r94,l0) conflicts: a0(r84,l0) a3(r96,l0) a4(r85,l0) a7(r93,l0)
;;     total conflict hard regs: 1
;;     conflict hard regs: 1

;; a7(r93,l0) conflicts: a0(r84,l0) a3(r96,l0) a4(r85,l0) a6(r94,l0) a8(r89,l0) a9(r91,l0) a10(r90,l0) a11(r86,l0) a12(r88,l0) a13(r87,l0)
;;     total conflict hard regs: 1
;;     conflict hard regs: 1

;; a8(r89,l0) conflicts: a0(r84,l0) a3(r96,l0) a4(r85,l0) a7(r93,l0)
;;     total conflict hard regs: 1
;;     conflict hard regs: 1

;; a9(r91,l0) conflicts: a0(r84,l0) a3(r96,l0) a4(r85,l0) a7(r93,l0) a10(r90,l0)
;;     total conflict hard regs: 1
;;     conflict hard regs: 1

;; a10(r90,l0) conflicts: a0(r84,l0) a3(r96,l0) a4(r85,l0) a7(r93,l0) a9(r91,l0) a11(r86,l0) a12(r88,l0) a13(r87,l0)
;;     total conflict hard regs: 1
;;     conflict hard regs: 1

;; a11(r86,l0) conflicts: a0(r84,l0) a4(r85,l0) a7(r93,l0) a10(r90,l0)
;;     total conflict hard regs: 1
;;     conflict hard regs: 1

;; a12(r88,l0) conflicts: a0(r84,l0) a4(r85,l0) a7(r93,l0) a10(r90,l0) a13(r87,l0)
;;     total conflict hard regs: 1
;;     conflict hard regs: 1

;; a13(r87,l0) conflicts: a0(r84,l0) a4(r85,l0) a7(r93,l0) a10(r90,l0) a12(r88,l0)
;;     total conflict hard regs: 1
;;     conflict hard regs: 1

;; a14(r99,l0) conflicts: a0(r84,l0) a15(r98,l0)
;;     total conflict hard regs: 1
;;     conflict hard regs: 1

;; a15(r98,l0) conflicts: a14(r99,l0)
;;     total conflict hard regs: 1 11
;;     conflict hard regs: 1 11


  cp0:a0(r84)<->a15(r98)@200:move
  cp1:a4(r85)<->a14(r99)@200:move
  cp2:a11(r86)<->a13(r87)@25:shuffle
  cp3:a11(r86)<->a12(r88)@25:shuffle
  cp4:a8(r89)<->a10(r90)@25:shuffle
  cp5:a8(r89)<->a9(r91)@25:shuffle
  cp6:a5(r92)<->a7(r93)@25:shuffle
  cp7:a5(r92)<->a6(r94)@25:shuffle
  cp8:a1(r95)<->a3(r96)@25:shuffle
  cp9:a1(r95)<->a2(r97)@25:shuffle
  pref0:a15(r98)<-hr10@400
  pref1:a14(r99)<-hr11@400
  regions=1, blocks=3, points=20
    allocnos=16 (big 0), copies=10, conflicts=0, ranges=16

**** Allocnos coloring:


  Loop 0 (parent -1, header bb2, depth 0)
    bbs: 2
    all: 0r84 1r95 2r97 3r96 4r85 5r92 6r94 7r93 8r89 9r91 10r90 11r86 12r88 13r87 14r99 15r98
    modified regnos: 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99
    border:
    Pressure: GR_REGS=7
    Hard reg set forest:
      0:( 1 5-63)@0
        1:( 5-31)@66800
          2:( 5-10 12-31)@4800
      Allocno a0r84 of GR_REGS(28) has 27 avail. regs  5-31, node:  5-31 (confl regs =  0-4 32-65)
      Allocno a1r95 of GR_REGS(28) has 27 avail. regs  5-31, node:  5-31 (confl regs =  0-4 32-65)
      Allocno a2r97 of GR_REGS(28) has 27 avail. regs  5-31, node:  5-31 (confl regs =  0-4 32-65)
      Allocno a3r96 of GR_REGS(28) has 27 avail. regs  5-31, node:  5-31 (confl regs =  0-4 32-65)
      Allocno a4r85 of GR_REGS(28) has 27 avail. regs  5-31, node:  5-31 (confl regs =  0-4 32-65)
      Allocno a5r92 of GR_REGS(28) has 27 avail. regs  5-31, node:  5-31 (confl regs =  0-4 32-65)
      Allocno a6r94 of GR_REGS(28) has 27 avail. regs  5-31, node:  5-31 (confl regs =  0-4 32-65)
      Allocno a7r93 of GR_REGS(28) has 27 avail. regs  5-31, node:  5-31 (confl regs =  0-4 32-65)
      Allocno a8r89 of GR_REGS(28) has 27 avail. regs  5-31, node:  5-31 (confl regs =  0-4 32-65)
      Allocno a9r91 of GR_REGS(28) has 27 avail. regs  5-31, node:  5-31 (confl regs =  0-4 32-65)
      Allocno a10r90 of GR_REGS(28) has 27 avail. regs  5-31, node:  5-31 (confl regs =  0-4 32-65)
      Allocno a11r86 of GR_REGS(28) has 27 avail. regs  5-31, node:  5-31 (confl regs =  0-4 32-65)
      Allocno a12r88 of GR_REGS(28) has 27 avail. regs  5-31, node:  5-31 (confl regs =  0-4 32-65)
      Allocno a13r87 of GR_REGS(28) has 27 avail. regs  5-31, node:  5-31 (confl regs =  0-4 32-65)
      Allocno a14r99 of GR_REGS(28) has 27 avail. regs  5-31, node:  5-31 (confl regs =  0-4 32-65)
      Allocno a15r98 of GR_REGS(28) has 26 avail. regs  5-10 12-31, node:  5-10 12-31 (confl regs =  0-4 11 32-65)
      Forming thread from colorable bucket:
        Forming thread by copy 0:a0r84-a15r98 (freq=200):
          Result (freq=2200): a0r84(1800) a15r98(400)
        Forming thread by copy 1:a4r85-a14r99 (freq=200):
          Result (freq=1400): a4r85(1000) a14r99(400)
        Forming thread by copy 2:a11r86-a13r87 (freq=25):
          Result (freq=800): a11r86(400) a13r87(400)
        Forming thread by copy 4:a8r89-a10r90 (freq=25):
          Result (freq=800): a8r89(400) a10r90(400)
        Forming thread by copy 6:a5r92-a7r93 (freq=25):
          Result (freq=800): a5r92(400) a7r93(400)
        Forming thread by copy 8:a1r95-a3r96 (freq=25):
          Result (freq=800): a1r95(400) a3r96(400)
      Pushing a12(r88,l0)(cost 0)
      Pushing a9(r91,l0)(cost 0)
      Pushing a6(r94,l0)(cost 0)
      Pushing a2(r97,l0)(cost 0)
      Pushing a13(r87,l0)(cost 0)
      Pushing a11(r86,l0)(cost 0)
      Pushing a10(r90,l0)(cost 0)
      Pushing a8(r89,l0)(cost 0)
      Pushing a7(r93,l0)(cost 0)
      Pushing a5(r92,l0)(cost 0)
      Pushing a3(r96,l0)(cost 0)
      Pushing a1(r95,l0)(cost 0)
      Pushing a14(r99,l0)(cost 0)
      Pushing a4(r85,l0)(cost 0)
      Pushing a15(r98,l0)(cost 0)
      Pushing a0(r84,l0)(cost 0)
      Popping a0(r84,l0)  --         assign reg 10
      Popping a15(r98,l0)  --         assign reg 10
      Popping a4(r85,l0)  --         assign reg 11
      Popping a14(r99,l0)  --         assign reg 11
      Popping a1(r95,l0)  --         assign reg 15
      Popping a3(r96,l0)  --         assign reg 15
      Popping a5(r92,l0)  --         assign reg 14
      Popping a7(r93,l0)  --         assign reg 14
      Popping a8(r89,l0)  --         assign reg 13
      Popping a10(r90,l0)  --         assign reg 13
      Popping a11(r86,l0)  --         assign reg 15
      Popping a13(r87,l0)  --         assign reg 15
      Popping a2(r97,l0)  --         assign reg 14
      Popping a6(r94,l0)  --         assign reg 13
      Popping a9(r91,l0)  --         assign reg 12
      Popping a12(r88,l0)  --         assign reg 12
Disposition:
    0:r84  l0    10    4:r85  l0    11   11:r86  l0    15   13:r87  l0    15
   12:r88  l0    12    8:r89  l0    13   10:r90  l0    13    9:r91  l0    12
    5:r92  l0    14    7:r93  l0    14    6:r94  l0    13    1:r95  l0    15
    3:r96  l0    15    2:r97  l0    14   15:r98  l0    10   14:r99  l0    11
New iteration of spill/restore move
+++Costs: overall -800, reg -800, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


vector_add

Dataflow summary:
;;  fully invalidated by EH 	 0 [zero] 3 [gp] 4 [tp] 5 [t0] 6 [t1] 7 [t2] 10 [a0] 11 [a1] 12 [a2] 13 [a3] 14 [a4] 15 [a5] 16 [a6] 17 [a7] 28 [t3] 29 [t4] 30 [t5] 31 [t6] 32 [ft0] 33 [ft1] 34 [ft2] 35 [ft3] 36 [ft4] 37 [ft5] 38 [ft6] 39 [ft7] 42 [fa0] 43 [fa1] 44 [fa2] 45 [fa3] 46 [fa4] 47 [fa5] 48 [fa6] 49 [fa7] 60 [ft8] 61 [ft9] 62 [ft10] 63 [ft11]
;;  hardware regs used 	 2 [sp] 64 [arg] 65 [frame]
;;  regular block artificial uses 	 2 [sp] 8 [s0] 64 [arg] 65 [frame]
;;  eh block artificial uses 	 2 [sp] 8 [s0] 64 [arg] 65 [frame]
;;  entry block defs 	 1 [ra] 2 [sp] 8 [s0] 10 [a0] 11 [a1] 12 [a2] 13 [a3] 14 [a4] 15 [a5] 16 [a6] 17 [a7] 42 [fa0] 43 [fa1] 44 [fa2] 45 [fa3] 46 [fa4] 47 [fa5] 48 [fa6] 49 [fa7] 64 [arg] 65 [frame]
;;  exit block uses 	 1 [ra] 2 [sp] 8 [s0] 65 [frame]
;;  regs ever live 	 10 [a0] 11 [a1]
;;  ref usage 	r1={1d,1u} r2={1d,2u} r8={1d,2u} r10={1d,1u} r11={1d,1u} r12={1d} r13={1d} r14={1d} r15={1d} r16={1d} r17={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r64={1d,1u} r65={1d,2u} r84={1d,8u,8e} r85={1d,4u,3e} r86={1d,1u} r87={1d,1u} r88={1d,1u} r89={1d,1u} r90={1d,1u} r91={1d,1u} r92={1d,1u} r93={1d,1u} r94={1d,1u} r95={1d,1u} r96={1d,1u} r97={1d,1u} r98={1d,1u} r99={1d,1u} 
;;    total ref usage 84{37d,36u,11e} in 20{20 regular + 0 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
(note 5 1 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 4 5 25 2 NOTE_INSN_FUNCTION_BEG)
(insn 25 4 26 2 (set (reg:SI 98)
        (reg:SI 10 a0 [ a ])) "o.c":1:34 136 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 10 a0 [ a ])
        (nil)))
(insn 26 25 2 2 (set (reg:SI 99)
        (reg:SI 11 a1 [ b ])) "o.c":1:34 136 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 11 a1 [ b ])
        (nil)))
(insn 2 26 3 2 (set (reg/v/f:SI 84 [ a ])
        (reg:SI 98)) "o.c":1:34 136 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 98)
        (nil)))
(insn 3 2 8 2 (set (reg/v/f:SI 85 [ b ])
        (reg:SI 99)) "o.c":1:34 136 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 99)
        (nil)))
(insn 8 3 7 2 (set (reg:SI 88 [ *b_12(D) ])
        (mem:SI (reg/v/f:SI 85 [ b ]) [1 *b_12(D)+0 S4 A32])) "o.c":3:14 136 {*movsi_internal}
     (expr_list:REG_EQUIV (mem:SI (reg/v/f:SI 85 [ b ]) [1 *b_12(D)+0 S4 A32])
        (nil)))
(insn 7 8 11 2 (set (reg:SI 87 [ *a_11(D) ])
        (mem:SI (reg/v/f:SI 84 [ a ]) [1 *a_11(D)+0 S4 A32])) "o.c":3:14 136 {*movsi_internal}
     (expr_list:REG_EQUIV (mem:SI (reg/v/f:SI 84 [ a ]) [1 *a_11(D)+0 S4 A32])
        (nil)))
(insn 11 7 15 2 (set (reg:SI 90 [ MEM[(int *)a_11(D) + 4B] ])
        (mem:SI (plus:SI (reg/v/f:SI 84 [ a ])
                (const_int 4 [0x4])) [1 MEM[(int *)a_11(D) + 4B]+0 S4 A32])) "o.c":3:14 136 {*movsi_internal}
     (expr_list:REG_EQUIV (mem:SI (plus:SI (reg/v/f:SI 84 [ a ])
                (const_int 4 [0x4])) [1 MEM[(int *)a_11(D) + 4B]+0 S4 A32])
        (nil)))
(insn 15 11 9 2 (set (reg:SI 93 [ MEM[(int *)a_11(D) + 8B] ])
        (mem:SI (plus:SI (reg/v/f:SI 84 [ a ])
                (const_int 8 [0x8])) [1 MEM[(int *)a_11(D) + 8B]+0 S4 A32])) "o.c":3:14 136 {*movsi_internal}
     (expr_list:REG_EQUIV (mem:SI (plus:SI (reg/v/f:SI 84 [ a ])
                (const_int 8 [0x8])) [1 MEM[(int *)a_11(D) + 8B]+0 S4 A32])
        (nil)))
(insn 9 15 10 2 (set (reg:SI 86)
        (plus:SI (reg:SI 87 [ *a_11(D) ])
            (reg:SI 88 [ *b_12(D) ]))) "o.c":3:14 3 {addsi3}
     (expr_list:REG_DEAD (reg:SI 88 [ *b_12(D) ])
        (expr_list:REG_DEAD (reg:SI 87 [ *a_11(D) ])
            (expr_list:REG_EQUIV (mem:SI (reg/v/f:SI 84 [ a ]) [1 *a_11(D)+0 S4 A32])
                (nil)))))
(insn 10 9 12 2 (set (mem:SI (reg/v/f:SI 84 [ a ]) [1 *a_11(D)+0 S4 A32])
        (reg:SI 86)) "o.c":3:14 136 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 86)
        (nil)))
(insn 12 10 19 2 (set (reg:SI 91 [ MEM[(int *)b_12(D) + 4B] ])
        (mem:SI (plus:SI (reg/v/f:SI 85 [ b ])
                (const_int 4 [0x4])) [1 MEM[(int *)b_12(D) + 4B]+0 S4 A32])) "o.c":3:14 136 {*movsi_internal}
     (expr_list:REG_EQUIV (mem:SI (plus:SI (reg/v/f:SI 85 [ b ])
                (const_int 4 [0x4])) [1 MEM[(int *)b_12(D) + 4B]+0 S4 A32])
        (nil)))
(insn 19 12 13 2 (set (reg:SI 96 [ MEM[(int *)a_11(D) + 12B] ])
        (mem:SI (plus:SI (reg/v/f:SI 84 [ a ])
                (const_int 12 [0xc])) [1 MEM[(int *)a_11(D) + 12B]+0 S4 A32])) "o.c":3:14 136 {*movsi_internal}
     (expr_list:REG_EQUIV (mem:SI (plus:SI (reg/v/f:SI 84 [ a ])
                (const_int 12 [0xc])) [1 MEM[(int *)a_11(D) + 12B]+0 S4 A32])
        (nil)))
(insn 13 19 14 2 (set (reg:SI 89)
        (plus:SI (reg:SI 90 [ MEM[(int *)a_11(D) + 4B] ])
            (reg:SI 91 [ MEM[(int *)b_12(D) + 4B] ]))) "o.c":3:14 3 {addsi3}
     (expr_list:REG_DEAD (reg:SI 91 [ MEM[(int *)b_12(D) + 4B] ])
        (expr_list:REG_DEAD (reg:SI 90 [ MEM[(int *)a_11(D) + 4B] ])
            (expr_list:REG_EQUIV (mem:SI (plus:SI (reg/v/f:SI 84 [ a ])
                        (const_int 4 [0x4])) [1 MEM[(int *)a_11(D) + 4B]+0 S4 A32])
                (nil)))))
(insn 14 13 16 2 (set (mem:SI (plus:SI (reg/v/f:SI 84 [ a ])
                (const_int 4 [0x4])) [1 MEM[(int *)a_11(D) + 4B]+0 S4 A32])
        (reg:SI 89)) "o.c":3:14 136 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 89)
        (nil)))
(insn 16 14 17 2 (set (reg:SI 94 [ MEM[(int *)b_12(D) + 8B] ])
        (mem:SI (plus:SI (reg/v/f:SI 85 [ b ])
                (const_int 8 [0x8])) [1 MEM[(int *)b_12(D) + 8B]+0 S4 A32])) "o.c":3:14 136 {*movsi_internal}
     (expr_list:REG_EQUIV (mem:SI (plus:SI (reg/v/f:SI 85 [ b ])
                (const_int 8 [0x8])) [1 MEM[(int *)b_12(D) + 8B]+0 S4 A32])
        (nil)))
(insn 17 16 18 2 (set (reg:SI 92)
        (plus:SI (reg:SI 93 [ MEM[(int *)a_11(D) + 8B] ])
            (reg:SI 94 [ MEM[(int *)b_12(D) + 8B] ]))) "o.c":3:14 3 {addsi3}
     (expr_list:REG_DEAD (reg:SI 94 [ MEM[(int *)b_12(D) + 8B] ])
        (expr_list:REG_DEAD (reg:SI 93 [ MEM[(int *)a_11(D) + 8B] ])
            (expr_list:REG_EQUIV (mem:SI (plus:SI (reg/v/f:SI 84 [ a ])
                        (const_int 8 [0x8])) [1 MEM[(int *)a_11(D) + 8B]+0 S4 A32])
                (nil)))))
(insn 18 17 20 2 (set (mem:SI (plus:SI (reg/v/f:SI 84 [ a ])
                (const_int 8 [0x8])) [1 MEM[(int *)a_11(D) + 8B]+0 S4 A32])
        (reg:SI 92)) "o.c":3:14 136 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 92)
        (nil)))
(insn 20 18 21 2 (set (reg:SI 97 [ MEM[(int *)b_12(D) + 12B] ])
        (mem:SI (plus:SI (reg/v/f:SI 85 [ b ])
                (const_int 12 [0xc])) [1 MEM[(int *)b_12(D) + 12B]+0 S4 A32])) "o.c":3:14 136 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v/f:SI 85 [ b ])
        (nil)))
(insn 21 20 22 2 (set (reg:SI 95)
        (plus:SI (reg:SI 96 [ MEM[(int *)a_11(D) + 12B] ])
            (reg:SI 97 [ MEM[(int *)b_12(D) + 12B] ]))) "o.c":3:14 3 {addsi3}
     (expr_list:REG_DEAD (reg:SI 97 [ MEM[(int *)b_12(D) + 12B] ])
        (expr_list:REG_DEAD (reg:SI 96 [ MEM[(int *)a_11(D) + 12B] ])
            (expr_list:REG_EQUIV (mem:SI (plus:SI (reg/v/f:SI 84 [ a ])
                        (const_int 12 [0xc])) [1 MEM[(int *)a_11(D) + 12B]+0 S4 A32])
                (nil)))))
(insn 22 21 27 2 (set (mem:SI (plus:SI (reg/v/f:SI 84 [ a ])
                (const_int 12 [0xc])) [1 MEM[(int *)a_11(D) + 12B]+0 S4 A32])
        (reg:SI 95)) "o.c":3:14 136 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 95)
        (expr_list:REG_DEAD (reg/v/f:SI 84 [ a ])
            (nil))))
(note 27 22 0 NOTE_INSN_DELETED)
