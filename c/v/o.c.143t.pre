
;; Function vector_add (vector_add, funcdef_no=0, decl_uid=1454, cgraph_uid=1, symbol_order=0)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
a = &NONLOCAL
b = &NONLOCAL
i_17 = i_14
i_17 = &NULL
i.0_1 = i_17
_2 = i.0_1 + UNKNOWN
_2 = &NONLOCAL
_3 = a + UNKNOWN
_4 = *_3
_5 = b + UNKNOWN
_6 = *_5
_7 = _4 + UNKNOWN
_7 = _6 + UNKNOWN
*_3 = _7
i_14 = i_17 + UNKNOWN
i_14 = &NONLOCAL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
a = { NONLOCAL }
b = { NONLOCAL } same as a
i_17 = { NULL NONLOCAL }
i_14 = { NULL NONLOCAL }
i.0_1 = { NULL NONLOCAL } same as i_17
_2 = { NULL NONLOCAL }
_3 = { NONLOCAL }
_4 = { ESCAPED NONLOCAL }
_5 = { NONLOCAL }
_6 = { ESCAPED NONLOCAL }
_7 = { ESCAPED NONLOCAL }


Alias information for vector_add

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

_3, points-to non-local, points-to NULL, points-to vars: { }
_5, points-to non-local, points-to NULL, points-to vars: { }
a_11(D), points-to non-local, points-to NULL, points-to vars: { }
b_12(D), points-to non-local, points-to NULL, points-to vars: { }

;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 5 4
;;
;; Loop 1
;;  header 3, latch 5
;;  depth 1, outer 0
;;  nodes: 3 5
;; 2 succs { 3 }
;; 3 succs { 5 4 }
;; 5 succs { 3 }
;; 4 succs { 1 }
void vector_add (int * a, int * b)
{
  int i;
  unsigned int i.0_1;
  unsigned int _2;
  int * _3;
  int _4;
  int * _5;
  int _6;
  int _7;

  <bb 2> [local count: 214748368]:

  <bb 3> [local count: 858993457]:
  # i_17 = PHI <i_14(5), 0(2)>
  i.0_1 = (unsigned int) i_17;
  _2 = i.0_1 * 4;
  _3 = a_11(D) + _2;
  _4 = *_3;
  _5 = b_12(D) + _2;
  _6 = *_5;
  _7 = _4 + _6;
  *_3 = _7;
  i_14 = i_17 + 1;
  if (i_14 != 4)
    goto <bb 5>; [80.00%]
  else
    goto <bb 4>; [20.00%]

  <bb 5> [local count: 687194763]:
  goto <bb 3>; [100.00%]

  <bb 4> [local count: 214748368]:
  return;

}


