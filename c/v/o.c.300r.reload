
;; Function vector_add (vector_add, funcdef_no=0, decl_uid=1454, cgraph_uid=1, symbol_order=0)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 8:  (0) r  (1) m {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 7:  (0) r  (1) m {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 11:  (0) r  (1) m {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 15:  (0) r  (1) m {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =r  (1) r  (2) r {addsi3}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=2,overall=21,losers=2,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 10:  (0) m  (1) rJ {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 12:  (0) r  (1) m {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 19:  (0) r  (1) m {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =r  (1) r  (2) r {addsi3}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=2,overall=21,losers=2,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 14:  (0) m  (1) rJ {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 16:  (0) r  (1) m {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =r  (1) r  (2) r {addsi3}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=2,overall=21,losers=2,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 18:  (0) m  (1) rJ {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 20:  (0) r  (1) m {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) =r  (1) r  (2) r {addsi3}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=2,overall=21,losers=2,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 22:  (0) m  (1) rJ {*movsi_internal}
	   Spilling non-eliminable hard regs: 2

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 22: point = 0, n_alt = 3
   Insn 21: point = 1, n_alt = 0
   Insn 20: point = 3, n_alt = 2
   Insn 18: point = 5, n_alt = 3
   Insn 17: point = 6, n_alt = 0
   Insn 16: point = 8, n_alt = 2
   Insn 14: point = 9, n_alt = 3
   Insn 13: point = 10, n_alt = 0
   Insn 19: point = 12, n_alt = 2
   Insn 12: point = 13, n_alt = 2
   Insn 10: point = 14, n_alt = 3
   Insn 9: point = 15, n_alt = 0
   Insn 15: point = 17, n_alt = 2
   Insn 11: point = 18, n_alt = 2
   Insn 7: point = 19, n_alt = 2
   Insn 8: point = 20, n_alt = 2
   Insn 3: point = 21, n_alt = -2
   Insn 2: point = 23, n_alt = -2
   Insn 26: point = 25, n_alt = -2
   Insn 25: point = 26, n_alt = -2
 r84: [0..23]
 r85: [4..21]
 r86: [14..15]
 r87: [16..19]
 r88: [16..20]
 r89: [9..10]
 r90: [11..18]
 r91: [11..13]
 r92: [5..6]
 r93: [7..17]
 r94: [7..8]
 r95: [0..1]
 r96: [2..12]
 r97: [2..3]
 r98: [24..26]
 r99: [22..25]
Compressing live ranges: from 27 to 20 - 74%
Ranges after the compression:
 r84: [0..17]
 r85: [4..15]
 r86: [12..13]
 r87: [14..15]
 r88: [14..15]
 r89: [8..9]
 r90: [10..15]
 r91: [10..11]
 r92: [4..5]
 r93: [6..15]
 r94: [6..7]
 r95: [0..1]
 r96: [2..11]
 r97: [2..3]
 r98: [18..19]
 r99: [16..19]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 2
	   Spilling non-eliminable hard regs: 2
New elimination table:
Can eliminate 64 to 2 (offset=0, prev_offset=0)
Can eliminate 64 to 8 (offset=0, prev_offset=0)
Can eliminate 65 to 2 (offset=0, prev_offset=0)
Can eliminate 65 to 8 (offset=0, prev_offset=0)
changing reg in insn 2
changing reg in insn 22
changing reg in insn 19
changing reg in insn 18
changing reg in insn 15
changing reg in insn 14
changing reg in insn 11
changing reg in insn 10
changing reg in insn 7
changing reg in insn 21
changing reg in insn 17
changing reg in insn 13
changing reg in insn 9
changing reg in insn 19
changing reg in insn 15
changing reg in insn 11
changing reg in insn 7
changing reg in insn 3
changing reg in insn 20
changing reg in insn 16
changing reg in insn 12
changing reg in insn 8
changing reg in insn 16
changing reg in insn 12
changing reg in insn 8
changing reg in insn 9
changing reg in insn 10
changing reg in insn 7
changing reg in insn 9
changing reg in insn 8
changing reg in insn 9
changing reg in insn 13
changing reg in insn 14
changing reg in insn 11
changing reg in insn 13
changing reg in insn 12
changing reg in insn 13
changing reg in insn 17
changing reg in insn 18
changing reg in insn 15
changing reg in insn 17
changing reg in insn 16
changing reg in insn 17
changing reg in insn 21
changing reg in insn 22
changing reg in insn 19
changing reg in insn 21
changing reg in insn 20
changing reg in insn 21
changing reg in insn 25
changing reg in insn 2
changing reg in insn 26
changing reg in insn 3
deleting insn with uid = 25.
deleting insn with uid = 26.
deleting insn with uid = 2.
deleting insn with uid = 3.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue: n_basic_blocks 3 n_edges 2 count 3 (    1)


vector_add

Dataflow summary:
;;  fully invalidated by EH 	 0 [zero] 3 [gp] 4 [tp] 5 [t0] 6 [t1] 7 [t2] 10 [a0] 11 [a1] 12 [a2] 13 [a3] 14 [a4] 15 [a5] 16 [a6] 17 [a7] 28 [t3] 29 [t4] 30 [t5] 31 [t6] 32 [ft0] 33 [ft1] 34 [ft2] 35 [ft3] 36 [ft4] 37 [ft5] 38 [ft6] 39 [ft7] 42 [fa0] 43 [fa1] 44 [fa2] 45 [fa3] 46 [fa4] 47 [fa5] 48 [fa6] 49 [fa7] 60 [ft8] 61 [ft9] 62 [ft10] 63 [ft11]
;;  hardware regs used 	 2 [sp]
;;  regular block artificial uses 	 2 [sp]
;;  eh block artificial uses 	 2 [sp] 64 [arg]
;;  entry block defs 	 1 [ra] 2 [sp] 10 [a0] 11 [a1] 12 [a2] 13 [a3] 14 [a4] 15 [a5] 16 [a6] 17 [a7] 42 [fa0] 43 [fa1] 44 [fa2] 45 [fa3] 46 [fa4] 47 [fa5] 48 [fa6] 49 [fa7]
;;  exit block uses 	 1 [ra] 2 [sp]
;;  regs ever live 	 10 [a0] 11 [a1] 12 [a2] 13 [a3] 14 [a4] 15 [a5]
;;  ref usage 	r1={1d,1u} r2={1d,2u} r10={1d,8u,8e} r11={1d,4u,3e} r12={3d,2u} r13={4d,3u} r14={4d,3u} r15={5d,4u} r16={1d} r17={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} 
;;    total ref usage 68{30d,27u,11e} in 16{16 regular + 0 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
(note 5 1 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 4 5 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 4 7 2 (set (reg:SI 12 a2 [orig:88 *b_12(D) ] [88])
        (mem:SI (reg/v/f:SI 11 a1 [orig:85 b ] [85]) [1 *b_12(D)+0 S4 A32])) "o.c":3:14 136 {*movsi_internal}
     (expr_list:REG_EQUIV (mem:SI (reg/v/f:SI 11 a1 [orig:85 b ] [85]) [1 *b_12(D)+0 S4 A32])
        (nil)))
(insn 7 8 11 2 (set (reg:SI 15 a5 [orig:87 *a_11(D) ] [87])
        (mem:SI (reg/v/f:SI 10 a0 [orig:84 a ] [84]) [1 *a_11(D)+0 S4 A32])) "o.c":3:14 136 {*movsi_internal}
     (expr_list:REG_EQUIV (mem:SI (reg/v/f:SI 10 a0 [orig:84 a ] [84]) [1 *a_11(D)+0 S4 A32])
        (nil)))
(insn 11 7 15 2 (set (reg:SI 13 a3 [orig:90 MEM[(int *)a_11(D) + 4B] ] [90])
        (mem:SI (plus:SI (reg/v/f:SI 10 a0 [orig:84 a ] [84])
                (const_int 4 [0x4])) [1 MEM[(int *)a_11(D) + 4B]+0 S4 A32])) "o.c":3:14 136 {*movsi_internal}
     (expr_list:REG_EQUIV (mem:SI (plus:SI (reg/v/f:SI 10 a0 [orig:84 a ] [84])
                (const_int 4 [0x4])) [1 MEM[(int *)a_11(D) + 4B]+0 S4 A32])
        (nil)))
(insn 15 11 9 2 (set (reg:SI 14 a4 [orig:93 MEM[(int *)a_11(D) + 8B] ] [93])
        (mem:SI (plus:SI (reg/v/f:SI 10 a0 [orig:84 a ] [84])
                (const_int 8 [0x8])) [1 MEM[(int *)a_11(D) + 8B]+0 S4 A32])) "o.c":3:14 136 {*movsi_internal}
     (expr_list:REG_EQUIV (mem:SI (plus:SI (reg/v/f:SI 10 a0 [orig:84 a ] [84])
                (const_int 8 [0x8])) [1 MEM[(int *)a_11(D) + 8B]+0 S4 A32])
        (nil)))
(insn 9 15 10 2 (set (reg:SI 15 a5 [86])
        (plus:SI (reg:SI 15 a5 [orig:87 *a_11(D) ] [87])
            (reg:SI 12 a2 [orig:88 *b_12(D) ] [88]))) "o.c":3:14 3 {addsi3}
     (expr_list:REG_EQUIV (mem:SI (reg/v/f:SI 10 a0 [orig:84 a ] [84]) [1 *a_11(D)+0 S4 A32])
        (nil)))
(insn 10 9 12 2 (set (mem:SI (reg/v/f:SI 10 a0 [orig:84 a ] [84]) [1 *a_11(D)+0 S4 A32])
        (reg:SI 15 a5 [86])) "o.c":3:14 136 {*movsi_internal}
     (nil))
(insn 12 10 19 2 (set (reg:SI 12 a2 [orig:91 MEM[(int *)b_12(D) + 4B] ] [91])
        (mem:SI (plus:SI (reg/v/f:SI 11 a1 [orig:85 b ] [85])
                (const_int 4 [0x4])) [1 MEM[(int *)b_12(D) + 4B]+0 S4 A32])) "o.c":3:14 136 {*movsi_internal}
     (expr_list:REG_EQUIV (mem:SI (plus:SI (reg/v/f:SI 11 a1 [orig:85 b ] [85])
                (const_int 4 [0x4])) [1 MEM[(int *)b_12(D) + 4B]+0 S4 A32])
        (nil)))
(insn 19 12 13 2 (set (reg:SI 15 a5 [orig:96 MEM[(int *)a_11(D) + 12B] ] [96])
        (mem:SI (plus:SI (reg/v/f:SI 10 a0 [orig:84 a ] [84])
                (const_int 12 [0xc])) [1 MEM[(int *)a_11(D) + 12B]+0 S4 A32])) "o.c":3:14 136 {*movsi_internal}
     (expr_list:REG_EQUIV (mem:SI (plus:SI (reg/v/f:SI 10 a0 [orig:84 a ] [84])
                (const_int 12 [0xc])) [1 MEM[(int *)a_11(D) + 12B]+0 S4 A32])
        (nil)))
(insn 13 19 14 2 (set (reg:SI 13 a3 [89])
        (plus:SI (reg:SI 13 a3 [orig:90 MEM[(int *)a_11(D) + 4B] ] [90])
            (reg:SI 12 a2 [orig:91 MEM[(int *)b_12(D) + 4B] ] [91]))) "o.c":3:14 3 {addsi3}
     (expr_list:REG_EQUIV (mem:SI (plus:SI (reg/v/f:SI 10 a0 [orig:84 a ] [84])
                (const_int 4 [0x4])) [1 MEM[(int *)a_11(D) + 4B]+0 S4 A32])
        (nil)))
(insn 14 13 16 2 (set (mem:SI (plus:SI (reg/v/f:SI 10 a0 [orig:84 a ] [84])
                (const_int 4 [0x4])) [1 MEM[(int *)a_11(D) + 4B]+0 S4 A32])
        (reg:SI 13 a3 [89])) "o.c":3:14 136 {*movsi_internal}
     (nil))
(insn 16 14 17 2 (set (reg:SI 13 a3 [orig:94 MEM[(int *)b_12(D) + 8B] ] [94])
        (mem:SI (plus:SI (reg/v/f:SI 11 a1 [orig:85 b ] [85])
                (const_int 8 [0x8])) [1 MEM[(int *)b_12(D) + 8B]+0 S4 A32])) "o.c":3:14 136 {*movsi_internal}
     (expr_list:REG_EQUIV (mem:SI (plus:SI (reg/v/f:SI 11 a1 [orig:85 b ] [85])
                (const_int 8 [0x8])) [1 MEM[(int *)b_12(D) + 8B]+0 S4 A32])
        (nil)))
(insn 17 16 18 2 (set (reg:SI 14 a4 [92])
        (plus:SI (reg:SI 14 a4 [orig:93 MEM[(int *)a_11(D) + 8B] ] [93])
            (reg:SI 13 a3 [orig:94 MEM[(int *)b_12(D) + 8B] ] [94]))) "o.c":3:14 3 {addsi3}
     (expr_list:REG_EQUIV (mem:SI (plus:SI (reg/v/f:SI 10 a0 [orig:84 a ] [84])
                (const_int 8 [0x8])) [1 MEM[(int *)a_11(D) + 8B]+0 S4 A32])
        (nil)))
(insn 18 17 20 2 (set (mem:SI (plus:SI (reg/v/f:SI 10 a0 [orig:84 a ] [84])
                (const_int 8 [0x8])) [1 MEM[(int *)a_11(D) + 8B]+0 S4 A32])
        (reg:SI 14 a4 [92])) "o.c":3:14 136 {*movsi_internal}
     (nil))
(insn 20 18 21 2 (set (reg:SI 14 a4 [orig:97 MEM[(int *)b_12(D) + 12B] ] [97])
        (mem:SI (plus:SI (reg/v/f:SI 11 a1 [orig:85 b ] [85])
                (const_int 12 [0xc])) [1 MEM[(int *)b_12(D) + 12B]+0 S4 A32])) "o.c":3:14 136 {*movsi_internal}
     (nil))
(insn 21 20 22 2 (set (reg:SI 15 a5 [95])
        (plus:SI (reg:SI 15 a5 [orig:96 MEM[(int *)a_11(D) + 12B] ] [96])
            (reg:SI 14 a4 [orig:97 MEM[(int *)b_12(D) + 12B] ] [97]))) "o.c":3:14 3 {addsi3}
     (expr_list:REG_EQUIV (mem:SI (plus:SI (reg/v/f:SI 10 a0 [orig:84 a ] [84])
                (const_int 12 [0xc])) [1 MEM[(int *)a_11(D) + 12B]+0 S4 A32])
        (nil)))
(insn 22 21 27 2 (set (mem:SI (plus:SI (reg/v/f:SI 10 a0 [orig:84 a ] [84])
                (const_int 12 [0xc])) [1 MEM[(int *)a_11(D) + 12B]+0 S4 A32])
        (reg:SI 15 a5 [95])) "o.c":3:14 136 {*movsi_internal}
     (nil))
(note 27 22 28 NOTE_INSN_DELETED)
(note 28 27 0 NOTE_INSN_DELETED)
